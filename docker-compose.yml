version: '3.9'

services:

  redis:
    image: redis
    ports:
      - '6380:6379'
    healthcheck:
      test: redis-cli ping
      interval: 2s
      timeout: 2s
      retries: 10

  db:
    image: postgres
    env_file:
      - .env.docker

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

    volumes:
      - pg_data:/var/lib/postgresql/data/pgdata
    ports:
      - '5433:5432'

  app:
    build: .
    tty: true
    command:  bash -c "python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - '8001:8000'

    env_file:
      - .env.docker
    volumes:
      - .:/code



  celery:
    build: .
    tty: true
    env_file:
      - .env.docker
    command: celery -A config worker -l INFO
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy


  celery_beat:
    build: .
    tty: true
    env_file:
      - .env.docker
    command: celery -A config beat -l INFO
    depends_on:
      - redis
      - app

  client:
    build:
      context: ./frontend_react/frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    depends_on:
      - db
      - app
      - celery
      - redis


  elasticsearch:
      image: elasticsearch:8.12.0
      env_file:
        - .env.docker
      environment:
        - discovery.type=single-node
        - xpack.security.enabled=false
      ports:
        - '9200:9200'
        - '9300:9300'
      depends_on:
        - db
        - app
        - redis
        - celery



volumes:
  pg_data:

